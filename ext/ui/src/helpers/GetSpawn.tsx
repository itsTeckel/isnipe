import Delaunator from 'delaunator';
const FAR_DISTANCE = 40;//If we found a spawn further than this. Exit early
const MIN_DISTANCE = 10;//Minimal distance

export function GetSpawn(points: Array<number[]>, map: string): [number, any] {
  var spawnPoints = Spawns[map];
  if(spawnPoints == null){
    dispatchVenice([0, null]);
    return [0, null];
  }
  //If points is empty or invalid. Pick a random spawn point.
  if (!(points instanceof Array) || !points.length) {
    let keys = Object.keys(spawnPoints);
    let spawnPoint = spawnPoints[keys[Math.floor(Math.random() * keys.length)]];
    let result: [number, any] = [1, spawnPoint];
    dispatchVenice(result);
    return result;
  }
  //Add all the spawns to the points array and add it to the spawn map.
  var spawns: any = {};
  for (let i = 0; i < spawnPoints.length; i++) {
    let spawnPoint = spawnPoints[i];
    let pair = [spawnPoint[3][0], spawnPoint[3][1]];
    points.push(pair);//x and y from the spawn point
    spawns[points.length-1] = spawnPoint;
  }
  let result = CalculateSpawn(points, spawns);
  dispatchVenice(result)
  return result;
}

function dispatchVenice(result: any) {
  if (navigator.userAgent.includes('VeniceUnleashed')) {
    var json = JSON.stringify(result);
    console.log(json);
    WebUI.Call('DispatchEventLocal', 'WebUICalculatedSpawn', json);
  }
}

export function CalculateSpawn(points: Array<number[]>, spawns: any): [number, any] {
  const delaunay = Delaunator.from(points);
  var triangles = delaunay.triangles;

  var set = 0;
  var best: [number, any] = [0, null];
  console.log('triangles', triangles.length);
  for (let i = 0; i < triangles.length; i += 3) {
     var point1Index = triangles[i];
     var point2Index = triangles[i + 1];
     var point3Index = triangles[i + 2];

     var point1IsSpawn = spawns[point1Index] != null;
     var point2IsSpawn = spawns[point2Index] != null;
     var point3IsSpawn = spawns[point3Index] != null;

     var point1 = points[point1Index]!;
     var point2 = points[point2Index]!;
     var point3 = points[point3Index]!;

     //If we found a triangle that is just spawn points. Then that means no players, go for it!
     if(point1IsSpawn && point2IsSpawn && point3IsSpawn) {
      return spawns[point1Index];
     }

     if(!point1IsSpawn && !point2IsSpawn  && !point3IsSpawn) {
      continue;
     }

     var point1To2 = distance(point1, point1IsSpawn, spawns[point1Index], point2, point2IsSpawn, spawns[point2Index]);
     var point2To3 = distance(point2, point2IsSpawn, spawns[point2Index], point3, point3IsSpawn, spawns[point3Index]);
     var point3To1 = distance(point3, point3IsSpawn, spawns[point3Index], point1, point1IsSpawn, spawns[point1Index]);

     /*
     console.log(
        set,
        point1,
        point2,
        point3
    );
    */
    
    //console.log('point1To2', point1To2);
    //console.log('point2To3', point2To3);
    //console.log('point3To1', point3To1);
    
    if(point1To2[0] > best[0]){
      best = point1To2;
    }
    
    if(point2To3[0] > best[0]){
      best = point2To3;
    }
    
    if(point3To1[0] > best[0]){
      best = point3To1;
    }

    //Exit early if we found a spawnpoint that is far away.
    if(best[0] >= FAR_DISTANCE){
      break;
    }

    set++;
  }
  if(best[0] <= MIN_DISTANCE){
    return [0, null];
  }
  return best;
}

var Spawns: any = {
      //Ziba Tower
      "XP2_Skybar": [
            [[0.87985253334045, 0.0, 0.47524675726891], [0.0, 1.0, 0.0], [-0.47524675726891, 0.0, 0.87985253334045], [38.025390625, 10.241094589233, -15.9267578125]],
            [[0.78991669416428, 0.0, -0.61321413516998], [0.0, 1.0, 0.0], [0.61321413516998, 0.0, 0.78991669416428], [-48.6953125, 11.246883392334, -10.76171875]],
            [[-0.83816993236542, 0.0, -0.54540914297104], [0.0, 1.0, 0.0], [0.54540914297104, 0.0, -0.83816993236542], [-48.541954040527, 11.239187240601, 4.4875049591064]],
            [[0.095165222883224, 0.0, 0.99546146392822], [0.0, 1.0, 0.0], [-0.99546146392822, 0.0, 0.095165222883224], [-31.517683029175, 10.879703521729, -3.7763655185699]],
            [[-0.61948239803314, 0.0, -0.78501051664352], [0.0, 1.0, 0.0], [0.78501051664352, 0.0, -0.61948239803314], [-27.065433502197, 11.501758575439, -7.8710980415344]],
            [[-0.17415051162243, 0.0, 0.98471903800964], [0.0, 1.0, 0.0], [-0.98471903800964, 0.0, -0.17415051162243], [-20.4873046875, 10.880663871765, -17.7412109375]],
            [[-0.11069636046886, 0.0, 0.9938542842865], [0.0, 1.0, 0.0], [-0.9938542842865, 0.0, -0.11069636046886], [-12.41796875, 10.879696846008, -31.33984375]],
            [[-0.010918388143182, 0.0, -0.99994039535522], [0.0, 1.0, 0.0], [0.99994039535522, 0.0, -0.010918388143182], [-0.0087890625, 10.879710197449, -9.197265625]],
            [[-0.6379634141922, 0.0, -0.77006667852402], [0.0, 1.0, 0.0], [0.77006667852402, 0.0, -0.6379634141922], [11.037136077881, 10.881640434265, 4.833984375]],
            [[0.81157916784286, 0.0, 0.58424246311188], [0.0, 1.0, 0.0], [-0.58424246311188, 0.0, 0.81157916784286], [28.3232421875, 10.880663871765, -25.6728515625]],
            [[-0.85697388648987, 0.0, 0.51535987854004], [0.0, 1.0, 0.0], [-0.51535987854004, 0.0, -0.85697388648987], [27.208984375, 10.880663871765, -17.0419921875]],
            [[-0.21219703555107, 0.0, 0.97722691297531], [0.0, 1.0, 0.0], [-0.97722691297531, 0.0, -0.21219703555107], [30.6611328125, 15.366015434265, -26.23828125]],
            [[0.4855922460556, 0.0, -0.8741854429245], [0.0, 1.0, 0.0], [0.8741854429245, 0.0, 0.4855922460556], [1.021484375, 15.360156059265, -29.12109375]],
            [[-0.62509846687317, 0.0, -0.78054589033127], [0.0, 1.0, 0.0], [0.78054589033127, 0.0, -0.62509846687317], [1.4619140625, 15.360156059265, -23.353515625]],
            [[-0.17643634974957, 0.0, -0.98431205749512], [0.0, 1.0, 0.0], [0.98431205749512, 0.0, -0.17643634974957], [0.3908716738224, 15.360156059265, -12.30859375]],
            [[0.64443415403366, 0.0, -0.76465982198715], [0.0, 1.0, 0.0], [0.76465982198715, 0.0, 0.64443415403366], [1.8642578125, 15.360156059265, -16.6279296875]],
            [[0.53501039743423, 0.0, 0.84484547376633], [0.0, 1.0, 0.0], [-0.84484547376633, 0.0, 0.53501039743423], [19.353515625, 15.387499809265, -17.072265625]],
            [[0.66533434391022, 0.0, 0.74654549360275], [0.0, 1.0, 0.0], [-0.74654549360275, 0.0, 0.66533434391022], [20.6611328125, 15.360156059265, -31.69140625]],
            [[-0.1281678378582, 0.0, 0.99175250530243], [0.0, 1.0, 0.0], [-0.99175250530243, 0.0, -0.1281678378582], [-23.3349609375, 15.363085746765, -18.0546875]],
            [[-0.22346246242523, 0.0, 0.97471255064011], [0.0, 1.0, 0.0], [-0.97471255064011, 0.0, -0.22346246242523], [-23.033479690552, 15.363085746765, -14.92857837677]],
            [[0.88780897855759, 0.0, 0.46021217107773], [0.0, 1.0, 0.0], [-0.46021217107773, 0.0, 0.88780897855759], [-30.6328125, 15.360156059265, -19.146484375]],
            [[-0.48135474324226, 0.0, -0.87652587890625], [0.0, 1.0, 0.0], [0.87652587890625, 0.0, -0.48135474324226], [-48.5849609375, 15.364062309265, 6.333984375]],
            [[0.98731464147568, 0.0, 0.15877597033978], [0.0, 1.0, 0.0], [-0.15877597033978, 0.0, 0.98731464147568], [-22.7802734375, 15.360156059265, 5.5751953125]],
            [[-0.99979048967361, 0.0, -0.020467609167099], [0.0, 1.0, 0.0], [0.020467609167099, 0.0, -0.99979048967361], [-20.765625, 15.361132621765, 19.1865234375]]
      ],
    //Noshahr Canals
    "MP_017": [
      [[-0.70174860954285, 0.0, -0.71242469549179], [0.0, 1.0, 0.0], [0.71242469549179, 0.0, -0.70174860954285], [-312.0458984375, 70.536911010742, 323.078125]],
      [[0.62152969837189, 0.0, 0.78339064121246], [0.0, 1.0, 0.0], [-0.78339064121246, 0.0, 0.62152969837189], [-327.2529296875, 70.513534545898, 310.1025390625]],
      [[0.70339822769165, 0.0, -0.7107959985733], [0.0, 1.0, 0.0], [0.7107959985733, 0.0, 0.70339822769165], [-356.7861328125, 67.936325073242, 318.5791015625]],
      [[-0.74390780925751, 0.0, 0.66828221082687], [0.0, 1.0, 0.0], [-0.66828221082687, 0.0, -0.74390780925751], [-362.439453125, 67.945114135742, 312.767578125]],
      [[0.32713311910629, 0.0, -0.9449782371521], [0.0, 1.0, 0.0], [0.9449782371521, 0.0, 0.32713311910629], [-346.7919921875, 71.388473510742, 295.7255859375]],
      [[-0.29239249229431, 0.0, 0.95629841089249], [0.0, 1.0, 0.0], [-0.95629841089249, 0.0, -0.29239249229431], [-336.0263671875, 71.388473510742, 299.375]],
      [[-0.34207788109779, 0.0, -0.93967163562775], [0.0, 1.0, 0.0], [0.93967163562775, 0.0, -0.34207788109779], [-344.6474609375, 70.434371948242, 265.3115234375]],
      [[-0.88363611698151, 0.0, 0.46817430853844], [0.0, 1.0, 0.0], [-0.46817430853844, 0.0, -0.88363611698151], [-331.1875, 70.433418273926, 253.984375]],
      [[0.040696356445551, 0.0, -0.99917155504227], [0.0, 1.0, 0.0], [0.99917155504227, 0.0, 0.040696356445551], [-299.76953125, 70.440231323242, 292.9697265625]],
      [[0.29355686903, 0.0, -0.95594161748886], [0.0, 1.0, 0.0], [0.95594161748886, 0.0, 0.29355686903], [-289.2548828125, 71.374801635742, 280.646484375]],
      [[-0.99980729818344, 0.0, -0.019631166011095], [0.0, 1.0, 0.0], [0.019631166011095, 0.0, -0.99980729818344], [-292.33984375, 66.660934448242, 262.771484375]],
      [[-0.59251260757446, 0.0, -0.80556118488312], [0.0, 1.0, 0.0], [0.80556118488312, 0.0, -0.59251260757446], [-329.630859375, 70.438278198242, 237.5625]],
      [[0.91309833526611, 0.0, -0.40773946046829], [0.0, 1.0, 0.0], [0.40773946046829, 0.0, 0.91309833526611], [-309.2177734375, 70.431442260742, 210.986328125]],
      [[0.58692914247513, 0.0, -0.80963832139969], [0.0, 1.0, 0.0], [0.80963832139969, 0.0, 0.58692914247513], [-328.8818359375, 70.438278198242, 198.5048828125]],
      [[0.74307304620743, 0.0, -0.66921031475067], [0.0, 1.0, 0.0], [0.66921031475067, 0.0, 0.74307304620743], [-353.9228515625, 74.439254760742, 189.8427734375]],
      [[0.69834744930267, 0.0, -0.71575891971588], [0.0, 1.0, 0.0], [0.71575891971588, 0.0, 0.69834744930267], [-358.8486328125, 70.434371948242, 282.0263671875]]
    ],
    //Seine
    "MP_011": [
      [[0.51517027616501, 0.0, 0.85708785057068], [0.0, 1.0, 0.0], [-0.85708785057068, 0.0, 0.51517027616501], [155.375, 10.259572982788, -113.6953125]],
      [[0.76554328203201, 0.0, -0.64338439702988], [0.0, 1.0, 0.0], [0.64338439702988, 0.0, 0.76554328203201], [138.8515625, 10.261523246765, -106.6494140625]],
      [[-0.40400922298431, 0.0, -0.91475492715836], [0.0, 1.0, 0.0], [0.91475492715836, 0.0, -0.40400922298431], [140.4560546875, 5.1218748092651, -73.1826171875]],
      [[0.042080860584974, 0.0, -0.99911421537399], [0.0, 1.0, 0.0], [0.99911421537399, 0.0, 0.042080860584974], [115.8251953125, 1.2800781726837, -64.974609375]],
      [[-0.75136119127274, 0.0, -0.65989112854004], [0.0, 1.0, 0.0], [0.65989112854004, 0.0, -0.75136119127274], [84.5673828125, 5.2800779342651, -115.66015625]],
      [[0.66257286071777, 0.0, 0.74899744987488], [0.0, 1.0, 0.0], [-0.74899744987488, 0.0, 0.66257286071777], [79.1884765625, 3.5193684101105, -116.3310546875]],
      [[0.94169467687607, 0.0, 0.33646863698959], [0.0, 1.0, 0.0], [-0.33646863698959, 0.0, 0.94169467687607], [55.478515625, 6.4187917709351, -94.6435546875]],
      [[-0.021903658285737, 0.0, -0.99976009130478], [0.0, 1.0, 0.0], [0.99976009130478, 0.0, -0.021903658285737], [48.4267578125, 6.4207029342651, -78.3876953125]],
      [[-0.8921805024147, 0.0, 0.45167908072472], [0.0, 1.0, 0.0], [-0.45167908072472, 0.0, -0.8921805024147], [22.289009094238, 1.2810547351837, -76.5576171875]],
      [[-0.97037822008133, 0.0, -0.24159073829651], [0.0, 1.0, 0.0], [0.24159073829651, 0.0, -0.97037822008133], [5.8389372825623, 6.4226560592651, -86.462120056152]],
      [[-0.16821473836899, 0.0, 0.98575037717819], [0.0, 1.0, 0.0], [-0.98575037717819, 0.0, -0.16821473836899], [13.072265625, 6.4294919967651, -77.3193359375]],
      [[-0.12085261940956, 0.0, 0.99267047643661], [0.0, 1.0, 0.0], [-0.99267047643661, 0.0, -0.12085261940956], [53.802734375, 1.2800781726837, -35.9619140625]],
      [[0.022504348307848, 0.0, -0.99974673986435], [0.0, 1.0, 0.0], [0.99974673986435, 0.0, 0.022504348307848], [27.904296875, -5.2822976112366, -0.978515625]],
      [[0.98823684453964, 0.0, 0.15293122828007], [0.0, 1.0, 0.0], [-0.15293122828007, 0.0, 0.98823684453964], [45.1328125, -6.4103364944458, -3.7174646854401]],
      [[-0.67440128326416, 0.0, -0.73836499452591], [0.0, 1.0, 0.0], [0.73836499452591, 0.0, -0.67440128326416], [87.91796875, 1.2927734851837, -28.185546875]]
    ]
};

function distance(point1: number[], point1IsSpawn: boolean, point1Value: any, point2: number[], point2IsSpawn: boolean, point2Value: any): [number, any] {
  if( ( point1IsSpawn && point2IsSpawn ) || ( !point1IsSpawn && !point2IsSpawn ) ) {
    return [0, null];
  }
  var distance = mathDist(point1[0]!, point1[1]!, point2[0]!, point2[1]!);
  if(point1IsSpawn) {
    return [distance, point1Value];
  }
  return [distance, point2Value];
}

function mathDist(x1:number,y1:number,x2:number,y2:number): number{ 
  if(!x2) x2=0; 
  if(!y2) y2=0;
  return Math.sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1)); 
}


function test() {
  var a = [4, 3];
  var b = [2, 1];
  var c = [0, 0];
  var d = [1, 3];

  var points = [a, b, c, d];
  var spawns = {
     1: {"interesting": 121},
     2: {"interesting": 13}
  }
  console.log(CalculateSpawn(points, spawns));
  //CalculateSpawn([[4, 3], [2, 1], [0, 0], [1, 3]], {1: 123, 2: 111})
}

